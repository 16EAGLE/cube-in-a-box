AWSTemplateFormatVersion: '2010-09-09'
Metadata:
  License: Apache-2.0
Description: 'Open Data Cube template with EC2 instance and RDS.'
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues: [
      t2.small, t2.medium, t2.large,
      m1.large, m1.xlarge, m2.xlarge,
      c4.large, c4.xlarge, c4.2xlarge,
      g2.8xlarge, r3.large, r3.xlarge]
    ConstraintDescription: must be a valid EC2 instance type.
  ExtentToIndex:
    Description: An extent to index within the cube in this box.
    Type: String
    Default: '146.30,146.83,-43.54,-43.20'
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Resources:
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref 'InstanceType'
      SecurityGroups: [!Ref 'InstanceSecurityGroup']
      KeyName: !Ref 'KeyName'
      ImageId: 'ami-d38a4ab1'
      IamInstanceProfile: !Ref ODCInstanceProfile
      UserData:
        Fn::Base64:
          !Join
            - ''
            - - |
                #!/bin/bash -ex
                # Install our dependencies
                apt-get update && apt-get -y install python-pip
                curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
                add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
                apt-get update
                apt-get install -y docker-ce python3-pip unzip wget
                pip3 install docker-compose
              - |
                # Get our code
                wget https://github.com/crc-si/opendatacube-cloudformation-testing/archive/master.zip -O /tmp/archive.zip
                unzip /tmp/archive.zip
                mv  opendatacube-cloudformation-testing-master /opt/odc-test
                # We need to remove some local vars. This is a hack...
                sed --in-place '/AWS_/d' /opt/odc-test/docker-compose.yml
              - |
                # Start the thing
                chmod -R 777 /opt/odc-test/notebooks
                cd /opt/odc-test
                sudo docker-compose pull
                sudo docker-compose up -d
                sleep 30
                docker-compose exec jupyter datacube -v system init
                docker-compose exec jupyter datacube product add /opt/odc/docs/config_samples/dataset_types/ls_usgs.yaml
                wget https://landsat.usgs.gov/sites/default/files/documents/wrs2_asc_desc.zip -O /opt/odc-test/data/wrs2_asc_desc.zip
              - 'docker-compose exec opendatacube '
              - 'bash -c "cd /opt/odc/scripts && python3 ./autoIndex.py -p ''/opt/odc/data/wrs2_asc_desc.zip'' -e '
              - !Ref 'ExtentToIndex'
              - '"'
        
      Tags:
        - Key:   "Name"
          Value: "OpenDataCube Test"

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref 'SSHLocation'
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: !Ref 'SSHLocation'
      - IpProtocol: tcp
        FromPort: '8888'
        ToPort: '8888'
        CidrIp: !Ref 'SSHLocation'

  ODCRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
  RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: odc-policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: ["S3:ListBucket"]
          Resource: ["arn:aws:s3:::landsat-pds"]
        - Effect: Allow
          Action: ["S3:GetObject"]
          Resource: ["arn:aws:s3:::landsat-pds/*"]
      Roles:
      - !Ref ODCRole
  ODCInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref ODCRole

Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref 'EC2Instance'
  AZ:
    Description: Availability Zone of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, AvailabilityZone]
  PublicDNS:
    Description: Public DNSName of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, PublicDnsName]
  PublicIP:
    Description: Public IP address of the newly created EC2 instance
    Value: !GetAtt [EC2Instance, PublicIp]
